[Busybox]

	$ make CROSS_COMPILE=aarch64-none-linux-gnu- menuconfig

		[Settings] => select [Build static binary]

	$ make
	$ make install

[rootfs]

	$ cp -af busybox/_install ./rootfs

	$ cd rootfs
	$ mkdir etc
	$ mkdir dev
	$ mkdir -p etc/init.d
	$ sudo mknod /dev/console c 5 1
	$ sudo mknod /dev/null c 1 3
	
	$ vi etc/init.d/rcS

		mkdir /proc
		mkdir /tmp
		mkdir /sys
		mkdir /mnt

		/bin/mount -a

		mkdir -p /dev/pts
		mount -t devpts devpts /dev/pts

		echo /sbin/mdev > /proc/sys/kernel/hotplug
		mdev -s

	$ chmod +x etc/init.d/rcS

	$ vi etc/fstab

		proc    /proc proc  default 0 0
		tmpfs   /tmp  tmpfs default 0 0
		sysfs   /sys  sysfs default 0 0
		tmpfs   /dev  tmpfs default 0 0
		debugfs /sys/kernel/debug debugfs default 0 0

	$ vi etc/inittab

		::sysinit:/etc/init.d/rcS
		::respawn:-/bin/sh
		::askfirst:-/bin/sh
		::ctrlaltdel:/bin/umount -a -r

		ln -sf /dev/null /dev/tty2
		ln -sf /dev/null /dev/tty3
		ln -sf /dev/null /dev/tty4

[cpio]

	$ find rootfs/ | cpio -o -H newc > initramfs.cpio
	$ find rootfs/ | cpio -o -H newc | gzip > initramfs.cpio.gz

[kernel]

	$ make ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu- menuconfig

		[General setup] => [Initramfs source file] : "<rootfs_dir>|<cpio_file>"

	$ make ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu- -j8

[QEMU]
	$ ./configure
	$ make
	$ sudo make install

	$ cp kernel/arch/arm64/boot/Image ./

	$ qemu-system-aarch64 -M virt -cpu cortex-a57 -smp 4 -m 2048M -kernel ./Image -append "rdinit=/linuxrc console=ttyAMA0 loglevel=8" -nographic -s

	EXIT: Ctrl+a, x

[GDB]

	$ aarch64-none-linux-gnu-gdb
	> target remote localhost:1234






